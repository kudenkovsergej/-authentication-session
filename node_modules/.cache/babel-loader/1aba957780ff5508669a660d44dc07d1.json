{"ast":null,"code":"// src/services/Api.js\nimport axios from 'axios';\nimport ApiConfig from '../config/ApiConfig';\nimport AdalConfig from '../config/AdalConfig';\nimport AuthContext from './Auth';\nvar instance = axios.create(ApiConfig); // Add a request interceptor\n\ninstance.interceptors.request.use(function (config) {\n  // Check and acquire a token before the request is sent\n  return new Promise(function (resolve, reject) {\n    AuthContext.acquireToken(AdalConfig.endpoints.api, function (message, token, msg) {\n      if (!!token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n        resolve(config);\n      } else {\n        // Do something with error of acquiring the token\n        reject(config);\n      }\n    });\n  });\n}, function (error) {\n  // Do something with error of the request\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["C:\\Work\\ReactAdalAuthenticationSession\\src\\services\\Api.js"],"names":["axios","ApiConfig","AdalConfig","AuthContext","instance","create","interceptors","request","use","config","Promise","resolve","reject","acquireToken","endpoints","api","message","token","msg","headers","Authorization","error"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,QAAxB;AAEA,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAaJ,SAAb,CAAjB,C,CAEA;;AACAG,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAACC,MAAD,EAAY;AAC5C;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCT,IAAAA,WAAW,CAACU,YAAZ,CAAyBX,UAAU,CAACY,SAAX,CAAqBC,GAA9C,EAAmD,UAACC,OAAD,EAAUC,KAAV,EAAiBC,GAAjB,EAAyB;AAC1E,UAAI,CAAC,CAACD,KAAN,EAAa;AACXR,QAAAA,MAAM,CAACU,OAAP,CAAeC,aAAf,oBAAyCH,KAAzC;AACAN,QAAAA,OAAO,CAACF,MAAD,CAAP;AACD,OAHD,MAGO;AACL;AACAG,QAAAA,MAAM,CAACH,MAAD,CAAN;AACD;AACF,KARD;AASD,GAVM,CAAP;AAWD,CAbD,EAaG,UAASY,KAAT,EAAgB;AACjB;AACA,SAAOX,OAAO,CAACE,MAAR,CAAeS,KAAf,CAAP;AACD,CAhBD;AAkBA,eAAejB,QAAf","sourcesContent":["// src/services/Api.js\r\nimport axios from 'axios'\r\n\r\nimport ApiConfig from '../config/ApiConfig'\r\nimport AdalConfig from '../config/AdalConfig'\r\nimport AuthContext from './Auth'\r\n\r\nconst instance = axios.create(ApiConfig)\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use((config) => {\r\n  // Check and acquire a token before the request is sent\r\n  return new Promise((resolve, reject) => {\r\n    AuthContext.acquireToken(AdalConfig.endpoints.api, (message, token, msg) => {\r\n      if (!!token) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n        resolve(config)\r\n      } else {\r\n        // Do something with error of acquiring the token\r\n        reject(config)\r\n      }\r\n    })\r\n  })\r\n}, function(error) {\r\n  // Do something with error of the request\r\n  return Promise.reject(error)\r\n})\r\n\r\nexport default instance"]},"metadata":{},"sourceType":"module"}